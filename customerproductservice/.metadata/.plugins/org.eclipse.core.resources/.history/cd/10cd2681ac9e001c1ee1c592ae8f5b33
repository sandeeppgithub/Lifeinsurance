package com.abc.cpservice.test;

import static org.mockito.Mockito.times;

import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.time.LocalDate;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;

import com.abc.cpservice.entity.CustomerProduct;
import com.abc.cpservice.repository.CustomerProductRepository;
import com.abc.cpservice.service.CustomerProductService;
import com.abc.cpservice.service.CustomerProductServiceImpl;


public class ProductServiceTest {
	@InjectMocks
	private CustomerProductService customerProductService = new CustomerProductServiceImpl();
	
	@Mock
	private CustomerProductRepository customerProductRepository;
	
	@Test
    public void testSaveProduct() {
       
        CustomerProduct customerProduct = new CustomerProduct();
        customerProduct.setCustomerProductId(10);
        customerProduct.setCustomerId(1);
        customerProduct.setDateOfMaturity(LocalDate.of(2000, 10, 10));
        customerProduct.setPremiumType(6);
        customerProduct.setPremiumMaount(12334);
        customerProduct.setProductId(23);
        customerProduct.setNomineeId(324);
           
       
        when(customerProductRepository.save(customerProduct)).thenReturn(customerProduct);
       
        CustomerProduct newProduct = customerProductService.saveCustomerProduct(customerProduct);
       
        //assertEquals(product.getProductName(), newProduct.getProductName(customerProduct));
       
        verify(customerProductRepository,times(1)).save(customerProduct);       
       
    }
	
//	@Test
//	public void testgetOrderDetails() {
//		CustomerProduct customerProduct = new CustomerProduct();
//		customerProduct.setCustomerProductId(10);
//        customerProduct.setCustomerId(1);
//        customerProduct.setDateOfMaturity(LocalDate.of(2000, 10, 10));
//        customerProduct.setPremiumType(6);
//        customerProduct.setPremiumMaount(12334);
//        customerProduct.setProductId(23);
//        customerProduct.setNomineeId(324);
//		
//		int customerProductId=1;
//		Optional<CustomerProduct> option=Optional.of(customerProduct);
//		
//		when(customerProductRepository.findById(102)).thenReturn(option);
//		
//		CustomerProduct existing=customerProductService.getCustomerProductDetails(customerProductId);
//		
//		assertEquals(customerProduct.getCustomerProductId(),existing.getCustomerProductId());
//		
//		
//		
//	}
	

//    }
}
