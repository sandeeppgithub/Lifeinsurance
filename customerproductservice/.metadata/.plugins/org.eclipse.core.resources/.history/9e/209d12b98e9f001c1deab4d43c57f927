package com.abc.cpservice.test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.time.LocalDate;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;

import com.abc.cpservice.entity.CustomerProductEntity;
import com.abc.cpservice.model.CustomerProduct;
import com.abc.cpservice.repository.CustomerProductRepository;
import com.abc.cpservice.service.CustomerProductService;
import com.abc.cpservice.service.CustomerProductServiceImpl;
import com.abc.cpserviceutil.Conversion;

@SpringBootTest
public class ProductServiceTest {
	@InjectMocks
	private CustomerProductService customerProductService = new CustomerProductServiceImpl();

	@Mock
	private CustomerProductRepository customerProductRepository;
	
	@Mock
	private Conversion conversion;

	@Test
	void testSaveOrder() {

		CustomerProduct customerProduct = new CustomerProduct();
		customerProduct.setCustomerProductId(2);
		customerProduct.setCustomerId(4);
		customerProduct.setDateOfMaturity(LocalDate.of(2022, 03, 8));
		customerProduct.setPremiumType(6);
		customerProduct.setPremiumAmount(20000);
		customerProduct.setProductId(3);
		customerProduct.setNomineeId(2);

		CustomerProductEntity customerProductEntity = new CustomerProductEntity();
		customerProductEntity.setCustomerProductId(customerProduct.getCustomerProductId());
		customerProductEntity.setCustomerId(customerProduct.getCustomerId());
		customerProductEntity.setDateOfMaturity(customerProduct.getDateOfMaturity());
		customerProductEntity.setNomineeId(customerProduct.getNomineeId());
		customerProductEntity.setPremiumAmount(customerProduct.getPremiumAmount());
		customerProductEntity.setPremiumType(customerProduct.getPremiumType());
		customerProductEntity.setProductId(customerProduct.getProductId());

		when(conversion.modelToEntity(customerProduct)).thenReturn(customerProductEntity);

		when(conversion.entityToModel(customerProductEntity)).thenReturn(customerProduct);

		when(customerProductRepository.save(customerProductEntity)).thenReturn(customerProduct);

		customerProduct = customerProductService.saveCustomerProduct(customerProduct);

		assertEquals(customerProductEntity.getCustomerProductId(), customerProduct.getCustomerProductId());

	}

//	@Test
//    public void testSaveProduct() {
//       
//        CustomerProduct customerProduct = new CustomerProduct();
//        customerProduct.setCustomerProductId(2);
//        customerProduct.setCustomerId(4);
//        customerProduct.setDateOfMaturity(LocalDate.of(2022, 03, 8));
//        customerProduct.setPremiumType(6);
//        customerProduct.setPremiumAmount(20000);
//        customerProduct.setProductId(3);
//        customerProduct.setNomineeId(2);
//           
//       
//        when(customerProductRepository.save(customerProduct)).thenReturn(customerProduct);
//       
//        CustomerProduct newProduct = customerProductService.saveCustomerProduct(customerProduct);
//       
//        //assertEquals(product.getProductName(), newProduct.getProductName(customerProduct));
//       
//        verify(customerProductRepository,times(1)).save(customerProduct);       
//       
//    }

	@Test
	public void testgetOrderDetails() {
		CustomerProductEntity customerProduct = new CustomerProductEntity();
		customerProduct.setCustomerProductId(1);
		customerProduct.setCustomerId(2);
		customerProduct.setDateOfMaturity(LocalDate.of(2000, 10, 10));
		customerProduct.setPremiumType(6);
		customerProduct.setPremiumAmount(12334);
		customerProduct.setProductId(23);
		customerProduct.setNomineeId(324);

		Optional<CustomerProductEntity> option = Optional.of(customerProduct);
		int customerProductId = 1;

		when(customerProductRepository.findById(1)).thenReturn(option);

		CustomerProduct existing = customerProductService.getCustomerProductDetails(customerProductId);

		// assertEquals(customerProduct.getCustomerProductId(),existing.getCustomerProductId());
		assertEquals(customerProduct.getCustomerProductId(), existing.getCustomerProductId());
	}

//	@Test
//    public void testGetCustomerByIdNotFound() {
//       
//        int customerProductId = 1;       
//           
//        when(customerProductRepository.findById(customerProductId)).thenThrow(ResourceNotFoundException.class);
//           
//        assertThrows(ResourceNotFoundException.class,()->customerProductService.getCustomerProductDetails(customerProductId));
//       
//    }

}
